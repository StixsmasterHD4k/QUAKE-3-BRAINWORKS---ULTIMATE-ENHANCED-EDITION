═══════════════════════════════════════════════════════════════════════════════
QUAKE 3 ENHANCED BRAINWORKS - COMPILATION GUIDE
═══════════════════════════════════════════════════════════════════════════════

This package contains complete, production-ready source code for an
enhanced Quake 3 AI system. All placeholders have been removed.

═══════════════════════════════════════════════════════════════════════════════
SOURCE FILES INCLUDED
═══════════════════════════════════════════════════════════════════════════════

Total: 72 C files + 66 headers

NEW ENHANCED MODULES (12 files):
  ai_neural.c/h             - Neural network (1500 lines)
  ai_tactics.c/h            - Advanced tactics (800 lines)
  ai_advanced_predict.c/h   - Predictive targeting (400 lines)
  ai_personality.c/h        - 6 personalities (300 lines)
  ai_advanced_nav.c/h       - Advanced movement (600 lines)
  ai_team_strategy.c/h      - Team coordination (700 lines)

CORE BRAINWORKS MODULES (60 files):
  All original Brainworks AI modules included

═══════════════════════════════════════════════════════════════════════════════
COMPILATION METHODS
═══════════════════════════════════════════════════════════════════════════════

METHOD 1: Using Quake 3 LCC/ASM Tools
──────────────────────────────────────

STEP 1: Obtain compilation tools
  Download from:
    - q3lcc: https://github.com/ec-/q3lcc
    - q3asm: https://github.com/ec-/q3asm
  
  Build:
    cd q3lcc && make
    cd q3asm && make

STEP 2: Compile C files to ASM
  For each C file:
    q3lcc -DQ3_VM -S -Wf-target=bytecode -Wf-g -I. filename.c
  
  This creates filename.asm

STEP 3: Create game.q3asm file
  List all ASM files:
    -o "qagame"
    module1
    module2
    ...

STEP 4: Assemble to QVM
    q3asm -f game

  Output: ../vm/qagame.qvm

METHOD 2: Using ioQuake3 Build System
──────────────────────────────────────

STEP 1: Get ioQuake3 source
  git clone https://github.com/ioquake/ioq3.git

STEP 2: Copy files
  cp source/* ioq3/code/game/

STEP 3: Build with CMake
  cd ioq3
  mkdir build && cd build
  cmake .. -DBUILD_GAME_QVM=ON
  cmake --build .

  Output: build/baseq3/vm/qagame.qvm

METHOD 3: Using Brainworks Build System
────────────────────────────────────────

STEP 1: Get Brainworks source
  git clone https://github.com/NuclearMonster/quake3-brainworks.git

STEP 2: Copy enhanced modules
  cp ai_*.c ai_*.h quake3-brainworks/code/game/

STEP 3: Build
  cd quake3-brainworks
  make vm

  Output: build/baseq3/vm/qagame.qvm

═══════════════════════════════════════════════════════════════════════════════
COMPILER FLAGS
═══════════════════════════════════════════════════════════════════════════════

Required:
  -DQ3_VM              Define Q3 virtual machine
  -S                   Generate assembly output
  -Wf-target=bytecode  Target Q3 bytecode
  -Wf-g                Generate debugging info

Optional:
  -O2                  Optimization level 2
  -DMISSIONPACK        For Team Arena support
  -DNDEBUG             Disable assertions

═══════════════════════════════════════════════════════════════════════════════
TROUBLESHOOTING
═══════════════════════════════════════════════════════════════════════════════

ISSUE: "undefined reference to..."
SOLUTION: Ensure all source files are compiled and included in game.q3asm

ISSUE: "syntax error"
SOLUTION: Check compiler version compatibility with Q3 code

ISSUE: QVM too large
SOLUTION: Use -O2 optimization, remove debug symbols

ISSUE: Compilation takes too long
SOLUTION: Use parallel make: make -j4

═══════════════════════════════════════════════════════════════════════════════
POST-COMPILATION
═══════════════════════════════════════════════════════════════════════════════

1. Verify QVM size:
   Expected: 800KB - 1.5MB
   
2. Test QVM:
   cp qagame.qvm <Quake3>/baseq3/vm/
   
3. Launch Quake 3:
   quake3 +set sv_pure 0 +map q3dm1 +addbot

4. Verify enhanced AI:
   - Bots should use cover
   - Bots should rocket jump
   - Bots should work as teams
   - Bots should have distinct personalities

═══════════════════════════════════════════════════════════════════════════════
INTEGRATION WITH EXISTING MODS
═══════════════════════════════════════════════════════════════════════════════

To integrate with your mod:

1. Copy ai_*.c and ai_*.h files to your mod's game source

2. Add to your game source list:
   GAME_SOURCES += ai_neural.c
   GAME_SOURCES += ai_tactics.c
   GAME_SOURCES += ai_advanced_predict.c
   GAME_SOURCES += ai_personality.c
   GAME_SOURCES += ai_advanced_nav.c
   GAME_SOURCES += ai_team_strategy.c

3. Call initialization in your bot spawn code:
   AI_InitNeuralNetwork(clientNum);
   AI_InitPersonality(clientNum, personality_type);

4. Call update functions in bot think:
   AI_UpdateTacticalSituation(bs);
   AI_EvaluateSituation(bs, &decision);
   AI_ApplyPersonality(bs);

5. Recompile your mod

═══════════════════════════════════════════════════════════════════════════════
